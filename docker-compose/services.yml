version: '3.8'
services:
  postgres:
    image: postgres:${POSTGRES_VERSION:-latest}
    container_name: postgres
    hostname: postgres # use this when we want one container to communicate with other inside docker network
    command: [ "postgres", "-c", "log_statement=all" ]
    volumes:
      - ./postgres_data:/var/lib/postgresql/data # all changes in database will be stored in this volume
      - ./postgres_init/01-init.sh:/docker-entrypoint-initdb.d/init-db.sh # used only first time container is built to create database and users
    #      - ./postgres_init/postgresql.conf:/var/lib/postgresql/data/postgresql.conf # replaced with command
    environment:
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=postgres"
      - "KEYCLOAK_DB=keycloak"
      - "KEYCLOAK_DB_USER=keycloak"
      - "KEYCLOAK_DB_PASSWORD=keycloak"
      - "KEYCLOAK_DB_SCHEMA=keycloak"
    ports:
      - "5432:5432"
    user: root
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "postgres", "-U", "postgres" ]
      timeout: 5s
      interval: 10s
      retries: 10
    restart: "no"
    networks:
      - ${GLOBAL_NETWORK:-services}
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  keycloak-authorization-server:
    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION:-latest}
    container_name: keycloak-authorization-server
    hostname: keycloak-authorization-server
    entrypoint: [ "/opt/keycloak/bin/kc.sh", "start-dev", "--http-port", "9091" ]
    ports:
      - "9091:9091"
    user: root
    volumes:
      - ./keycloak/realms/export:/tmp/export
    environment:
      - "KEYCLOAK_ADMIN=admin"
      - "KEYCLOAK_ADMIN_PASSWORD=admin"
      - "KC_LOG_LEVEL=INFO"
      - "KC_DB=postgres" # database type
      - "KC_DB_USERNAME=keycloak"
      - "KC_DB_PASSWORD=keycloak"
      - "KC_DB_SCHEMA=public" # only public schema works?
      - "KC_DB_URL_DATABASE=keycloak" # database to use
      - "KC_DB_URL_HOST=postgres" # postgres service defined above
      - "KC_DB_URL_PORT=5432"
    depends_on:
      - postgres
    networks:
      - ${GLOBAL_NETWORK:-services}

  config-server:
    image: ${GROUP_ID}/config.server:${SERVICE_VERSION:-latest}
    container_name: config-server
    hostname: config-server
    ports:
      - "5007:5007"
      - "8888:8888"
    user: root
    volumes:
      - "./docker-logs:/workspace/config-server/logs" # /workspace/config-server/logs directory structure inside container built by build-image maven plugin
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007 -Xms128m -Xmx256m"
      - "LOG_APP-NAME=config-server"
      - "SERVER_PORT=8888"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
    networks:
      - ${GLOBAL_NETWORK:-services}

  config-server-ha:
    image: ${GROUP_ID}/config.server:${SERVICE_VERSION:-latest}
    container_name: config-server-ha
    hostname: config-server-ha
    ports:
      - "5018:5018"
      - "8889:8889"
    user: root
    volumes:
      - "./docker-logs:/workspace/config-server/logs" # /workspace/config-server/logs directory structure inside container built by build-image maven plugin
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5018 -Xms128m -Xmx256m"
      - "LOG_APP-NAME=config-server-ha"
      - "SERVER_PORT=8889"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
    networks:
      - ${GLOBAL_NETWORK:-services}

  twitter-to-kafka-service:
    image: ${GROUP_ID}/twitter.to.kafka.service:${SERVICE_VERSION:-latest}
    container_name: twitter-to-kafka-service
    hostname: twitter-to-kafka-service
    ports:
      - "5005:5005"
    volumes:
      - "./docker-logs:/workspace/twitter-to-kafka-service/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ] # execute this script as a first thing when container starts
    depends_on: # docker-compose option that sets ordering between containers
      - config-server
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=info"
      - "LOGGING_LEVEL_ROOT=info"
      - "KAFKA-CONFIG_TOPIC-NAME=twitter-topic"
      - "KAFKA-CONFIG_TOPIC-NAMES-TO-CREATE_0=twitter-topic"
      - "KAFKA-CONFIG_TOPIC-NAMES-TO-CREATE_1=twitter-analytics-topic"
      - "KAFKA-CONFIG_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "KAFKA-CONFIG_SCHEMA-REGISTRY-URL=http://schema-registry:8081"
      # -> overwrite enable mock tweets variable in services.yml file to run application using mock tweets ->
      # -> this enables running mock tweets without the need to rebuild application and docker image!!!
      - "TWITTER-TO-KAFKA-SERVICE_ENABLE-MOCK-TWEETS=false"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888,http://config-server-ha:8889"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "LOG_APP-NAME=twitter-to-kafka-service"
      - "SPRING_ZIPKIN_BASE-URL=http://zipkin:9411" # not needed when using kafka, this is just as a proof of concept that we can use HTTP, too
      - "SPRING_ZIPKIN_SENDER_TYPE=web" # use this variable and value 'web' when you have spring-kafka dependency in your configuration but, still want to use HTTP communication between Sleuth and Zipkin
      - "SPRING_SLEUTH_SAMPLER_PROBABILITY=1.0" # range [0.0-1.0], 1.0 meaning we want to send all the TRACE(id) and SPAN(id) data to zipkin
      - "TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}"
    networks:
      - ${GLOBAL_NETWORK:-services}

  kafka-to-elastic-service:
    image: ${GROUP_ID}/kafka.to.elastic.service:${SERVICE_VERSION:-latest}
    container_name: kafka-to-elastic-service
    hostname: kafka-to-elastic-service
    ports:
      - "5006:5006"
    volumes:
      - "./docker-logs:/workspace/kafka-to-elastic-service/logs"
      - "./check-kafka-topics-created.sh:/usr/local/bin/check-kafka-topics-created.sh"
    user: root
    entrypoint: [ "check-kafka-topics-created.sh" ]
    depends_on:
      - config-server
      - twitter-to-kafka-service
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
      - elastic-1
      - elastic-2
      - elastic-3
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=info"
      - "LOGGING_LEVEL_ROOT=info"
      - "KAFKA-CONFIG_TOPIC-NAME=twitter-topic"
      - "KAFKA-CONFIG_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "KAFKA-CONFIG_SCHEMA-REGISTRY-URL=http://schema-registry:8081"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888,http://config-server-ha:8889"
      - "ELASTIC-CONFIG_INDEX-NAME=twitter-index"
      - "ELASTIC-CONFIG_CONNECTION-URL=http://elastic-1:9200"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "LOG_APP-NAME=kafka-to-elastic-service"
      - "SPRING_ZIPKIN_SENDER_TYPE=kafka" # base-url not needed with kafka, # kafka topic 'zipkin' will be created automatically when using this flow
      - "SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092" # zipkin will consume the data and put it on it's own persistent store (mysql in this case)
      - "SPRING_SLEUTH_SAMPLER_PROBABILITY=1.0"
      - "SPRING_DATA_ELASTICSEARCH_CLIENT_REACTIVE_ENDPOINTS=elastic-1:9200"
    networks:
      - ${GLOBAL_NETWORK:-services}

  elastic-query-service-1:
    image: ${GROUP_ID}/elastic.query.service:${SERVICE_VERSION:-latest}
    container_name: elastic-query-service-1
    hostname: elastic-query-service-1
    ports:
      - "5008:5008"
      - "8183:8183"
    volumes:
      - "./docker-logs:/workspace/elastic-query-service/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-elastic-cluster-started.sh:/usr/local/bin/check-elastic-cluster-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ]
    depends_on:
      - config-server
      - elastic-1
      - elastic-2
      - elastic-3
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5008 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=info"
      - "LOGGING_LEVEL_ROOT=info"
      - "ELASTIC-CONFIG_INDEX-NAME=twitter-index"
      - "ELASTIC-CONFIG_CONNECTION-URL=http://elastic-1:9200"
      - "SERVER_PORT=8183"
      - "SERVER_SERVLET_CONTEXT-PATH=/"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888,http://config-server-ha:8889"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI=http://keycloak-authorization-server:9091/realms/microservices-realm"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI=http://keycloak-authorization-server:9091/realms/microservices-realm/protocol/openid-connect/certs"
      - "SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_TOKEN-URI=http://keycloak-authorization-server:9091/realms/microservices-realm/protocol/openid-connect/token"
      - "SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres?currentSchema=public&binaryTransfer=true&reWriteBatchedInserts=true"
      - "ELASTIC-QUERY-SERVICE_QUERY-FROM-KAFKA-STATE-STORE_URI=http://gateway-service/kafka-streams-service/get-word-count-by-word/{word}"
      - "ELASTIC-QUERY-SERVICE_QUERY-FROM-ANALYTICS-DATABASE_URI=http://gateway-service/analytics-service/get-word-count-by-word/{word}"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "SPRING_DATA_ELASTICSEARCH_CLIENT_REACTIVE_ENDPOINTS=elastic-1:9200"
      - "LOG_APP-NAME=elastic-query-service-1"
      - "SPRING_ZIPKIN_SENDER_TYPE=kafka"
      - "SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "SPRING_SLEUTH_SAMPLER_PROBABILITY=1.0"
    networks:
      - ${GLOBAL_NETWORK:-services}

  elastic-query-service-2:
    image: ${GROUP_ID}/elastic.query.service:${SERVICE_VERSION:-latest}
    container_name: elastic-query-service-2
    hostname: elastic-query-service-2
    ports:
      - "5009:5009"
      - "8186:8186"
    volumes:
      - "./docker-logs:/workspace/elastic-query-service/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-elastic-cluster-started.sh:/usr/local/bin/check-elastic-cluster-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ]
    depends_on:
      - config-server
      - elastic-1
      - elastic-2
      - elastic-3
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5009 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=info"
      - "LOGGING_LEVEL_ROOT=info"
      - "ELASTIC-CONFIG_INDEX-NAME=twitter-index"
      - "ELASTIC-CONFIG_CONNECTION-URL=http://elastic-1:9200"
      - "SERVER_PORT=8186"
      - "SERVER_SERVLET_CONTEXT-PATH=/"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888,http://config-server-ha:8889"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI=http://keycloak-authorization-server:9091/realms/microservices-realm"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI=http://keycloak-authorization-server:9091/realms/microservices-realm/protocol/openid-connect/certs"
      - "SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_TOKEN-URI=http://keycloak-authorization-server:9091/realms/microservices-realm/protocol/openid-connect/token"
      - "SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres?currentSchema=public&binaryTransfer=true&reWriteBatchedInserts=true"
      - "SPRING_DATASOURCE_INITIALIZATION-MODE=never" # schema is already created and data is already inserted so we might get initialization errors
      - "ELASTIC-QUERY-SERVICE_QUERY-FROM-KAFKA-STATE-STORE_URI=http://gateway-service/kafka-streams-service/get-word-count-by-word/{word}"
      - "ELASTIC-QUERY-SERVICE_QUERY-FROM-ANALYTICS-DATABASE_URI=http://gateway-service/analytics-service/get-word-count-by-word/{word}"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "SPRING_DATA_ELASTICSEARCH_CLIENT_REACTIVE_ENDPOINTS=elastic-1:9200"
      - "LOG_APP-NAME=elastic-query-service-2"
      - "SPRING_ZIPKIN_SENDER_TYPE=kafka"
      - "SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "SPRING_SLEUTH_SAMPLER_PROBABILITY=1.0"
    networks:
      - ${GLOBAL_NETWORK:-services}

  elastic-query-web-client:
    image: ${GROUP_ID}/elastic.query.web.client:${SERVICE_VERSION:-latest}
    container_name: elastic-query-web-client
    hostname: elastic-query-web-client
    ports:
      - "5010:5010"
      - "8184:8184"
    volumes:
      - "./docker-logs:/workspace/elastic-query-web-client/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ]
    depends_on:
      - config-server
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5010 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=info"
      - "LOGGING_LEVEL_ROOT=info"
      - "SERVER_PORT=8184"
      - "SERVER_SERVLET_CONTEXT-PATH=/elastic-query-web-client"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888,http://config-server-ha:8889"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_BASE-URL=http://gateway-service/elastic-query-service/documents"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_ID=elastic-query-service-1"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_HOST=elastic-query-service-1"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_PORT=8183"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_ID=elastic-query-service-2"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_HOST=elastic-query-service-2"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_PORT=8186"
      - "SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI=http://keycloak-authorization-server:9091/realms/microservices-realm"
      - "SECURITY_LOGOUT-SUCCESS-URL=http://elastic-query-web-client:8184/elastic-query-web-client"
      - "SECURITY_DEFAULT-CLIENT-REGISTRATION-ID=keycloak"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "LOG_APP-NAME=elastic-query-web-client"
      - "SPRING_ZIPKIN_SENDER_TYPE=kafka"
      - "SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "SPRING_SLEUTH_SAMPLER_PROBABILITY=1.0"
    networks:
      - ${GLOBAL_NETWORK:-services}

  #  elastic-query-web-client-1:
  #    image: ${GROUP_ID}/elastic.query.web.client:${SERVICE_VERSION:-latest}
  #    container_name: elastic-query-web-client-1
  #    hostname: elastic-query-web-client-1
  #    ports:
  #      - "5010:5010"
  #      - "8184:8184"
  #    volumes:
  #      - "./docker-logs:/workspace/elastic-query-web-client/logs"
  #      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
  #      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
  #    user: root
  #    entrypoint: [ "check-config-server-started.sh" ]
  #    depends_on:
  #      - config-server
  #    environment:
  #      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5010 -Xms128m -Xmx256m"
  #      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=info"
  #      - "LOGGING_LEVEL_ROOT=info"
  #      - "SERVER_PORT=8184"
  #      - "SERVER_SERVLET_CONTEXT-PATH=/elastic-query-web-client"
  #      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888,http://config-server-ha:8889"
  #      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_BASE-URL=http://gateway-service/elastic-query-service/documents"
  #      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_ID=elastic-query-service-1"
  #      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_HOST=elastic-query-service-1"
  #      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_PORT=8183"
  #      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_ID=elastic-query-service-2"
  #      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_HOST=elastic-query-service-2"
  #      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_PORT=8186"
  #      - "SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI=http://keycloak-authorization-server:9091/realms/microservices-realm"
  #      - "SECURITY_LOGOUT-SUCCESS-URL=http://elastic-query-web-client:8184/elastic-query-web-client"
  #      - "SECURITY_DEFAULT-CLIENT-REGISTRATION-ID=keycloak"
  #      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
  #      - "LOG_APP-NAME=elastic-query-web-client-1"
  #      - "SPRING_ZIPKIN_SENDER_TYPE=kafka"
  #      - "SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
  #      - "SPRING_SLEUTH_SAMPLER_PROBABILITY=1.0"
  #    networks:
  #      - ${GLOBAL_NETWORK:-services}
  #
  #  elastic-query-web-client-2:
  #    image: ${GROUP_ID}/elastic.query.web.client.2:${SERVICE_VERSION:-latest}
  #    container_name: elastic-query-web-client-2
  #    hostname: elastic-query-web-client-2
  #    ports:
  #      - "5011:5011"
  #      - "8185:8185"
  #    volumes:
  #      - "./docker-logs:/workspace/elastic-query-web-client/logs"
  #      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
  #      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
  #    user: root
  #    entrypoint: [ "check-config-server-started.sh" ]
  #    depends_on:
  #      - config-server
  #    environment:
  #      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5011 -Xms128m -Xmx256m"
  #      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=info"
  #      - "LOGGING_LEVEL_ROOT=info"
  #      - "SERVER_PORT=8185"
  #      - "SERVER_SERVLET_CONTEXT-PATH=/elastic-query-web-client"
  #      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888,http://config-server-ha:8889"
  #      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_BASE-URL=http://gateway-service/elastic-query-service/documents"
  #      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_ID=elastic-query-service-1"
  #      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_HOST=elastic-query-service-1"
  #      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_PORT=8183"
  #      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_ID=elastic-query-service-2"
  #      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_HOST=elastic-query-service-2"
  #      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_PORT=8186"
  #      - "SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI=http://keycloak-authorization-server:9091/realms/microservices-realm"
  #      - "SECURITY_LOGOUT-SUCCESS-URL=http://elastic-query-web-client-2:8185/elastic-query-web-client"
  #      - "SECURITY_DEFAULT-CLIENT-REGISTRATION-ID=keycloak"
  #      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
  #      - "LOG_APP-NAME=elastic-query-web-client-2"
  #      - "SPRING_ZIPKIN_SENDER_TYPE=kafka"
  #      - "SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
  #      - "SPRING_SLEUTH_SAMPLER_PROBABILITY=1.0"
  #    networks:
  #      - ${GLOBAL_NETWORK:-services}

  kafka-streams-service:
    image: ${GROUP_ID}/kafka.streams.service:${SERVICE_VERSION:-latest}
    container_name: kafka-streams-service
    hostname: kafka-streams-service
    ports:
      - "5012:5012"
      - "8187:8187"
    volumes:
      - "./docker-logs:/workspace/kafka-streams-service/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ]
    depends_on:
      - config-server
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5012 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=info"
      - "LOGGING_LEVEL_ROOT=info"
      - "SERVER_PORT=8187"
      - "SERVER_SERVLET_CONTEXT-PATH=/"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888,http://config-server-ha:8889"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI=http://keycloak-authorization-server:9091/realms/microservices-realm"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI=http://keycloak-authorization-server:9091/realms/microservices-realm/protocol/openid-connect/certs"
      - "KAFKA-CONFIG_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "KAFKA-CONFIG_SCHEMA-REGISTRY-URL=http://schema-registry:8081"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "LOG_APP-NAME=kafka-streams-service"
      - "SPRING_ZIPKIN_SENDER_TYPE=kafka"
      - "SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "SPRING_SLEUTH_SAMPLER_PROBABILITY=1.0"
    networks:
      - ${GLOBAL_NETWORK:-services}

  analytics-service:
    image: ${GROUP_ID}/analytics.service:${SERVICE_VERSION:-latest}
    container_name: analytics-service
    hostname: analytics-service
    ports:
      - "5013:5013"
      - "8188:8188"
    volumes:
      - "./docker-logs:/workspace/analytics-service/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ]
    depends_on:
      - config-server
      - postgres
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5013 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=error"
      - "LOGGING_LEVEL_ROOT=info"
      - "SERVER_PORT=8188"
      - "SERVER_SERVLET_CONTEXT-PATH=/" # we can remove the context path as we won't use it directly to call the services, but we have the wildcard for that in config-client-gateway.yml config file and will call gateway-service directly so we can keep URI simple here and remove context path as it will be replaced
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888,http://config-server-ha:8889"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI=http://keycloak-authorization-server:9091/realms/microservices-realm"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI=http://keycloak-authorization-server:9091/realms/microservices-realm/protocol/openid-connect/certs"
      - "SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres?currentSchema=analytics&binaryTransfer=true&reWriteBatchedInserts=true"
      - "KAFKA-CONFIG_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "KAFKA-CONFIG_SCHEMA-REGISTRY-URL=http://schema-registry:8081"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "LOG_APP-NAME=analytics-service"
      - "SPRING_ZIPKIN_SENDER_TYPE=kafka"
      - "SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "SPRING_SLEUTH_SAMPLER_PROBABILITY=1.0"
    networks:
      - ${GLOBAL_NETWORK:-services}

  discovery-service-1:
    image: ${GROUP_ID}/discovery.service:${SERVICE_VERSION:-latest}
    container_name: discovery-service-1
    hostname: discovery-service-1
    ports:
      - "5014:5014"
      - "8761:8761"
    user: root
    volumes:
      - "./docker-logs:/workspace/discovery-service/logs"
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5014 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_ROOT=info"
      - "SERVER_PORT=8761"
      - "SPRING_PROFILES_ACTIVE=peer1"
      - "LOG_APP-NAME=discovery-service-1"
      - "EUREKA_INSTANCE_HOSTNAME=discovery-service-1"
      #- "EUREKA_CLIENT_SERVICE-URL_DEFAULT-ZONE=http://discovery-service-1:8761/eureka/,http://discovery-service-2:8762/eureka/" # not needed here as it is configured in discovery-service yml file
    networks:
      - ${GLOBAL_NETWORK:-services}

  discovery-service-2:
    image: ${GROUP_ID}/discovery.service:${SERVICE_VERSION:-latest}
    container_name: discovery-service-2
    hostname: discovery-service-2
    ports:
      - "5015:5015"
      - "8762:8762"
    user: root
    volumes:
      - "./docker-logs:/workspace/discovery-service/logs"
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5015 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_ROOT=info"
      - "SERVER_PORT=8762"
      - "SPRING_PROFILES_ACTIVE=peer2"
      - "LOG_APP-NAME=discovery-service-2"
      - "EUREKA_INSTANCE_HOSTNAME=discovery-service-2"
      #- "EUREKA_CLIENT_SERVICE-URL_DEFAULT-ZONE=http://discovery-service-1:8761/eureka/,http://discovery-service-2:8762/eureka/" # not needed here as it is configured in discovery-service yml file
    networks:
      - ${GLOBAL_NETWORK:-services}

  gateway-service-1:
    image: ${GROUP_ID}/gateway.service:${SERVICE_VERSION:-latest}
    container_name: gateway-service-1
    hostname: gateway-service-1
    ports:
      - "5016:5016"
      - "9092:9092"
    volumes:
      - "./docker-logs:/workspace/gateway-service/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ]
    links:
      - "redis-master:redis" # <service-name>:<host-name>
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5016 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_ROOT=debug"
      - "SERVER_PORT=9092"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888,http://config-server-ha:8889"
      - "SPRING_REDIS_HOST=redis"
      - "LOG_APP-NAME=gateway-service-1"
      - "EUREKA_CLIENT_SERVICE-URL_DEFAULT-ZONE=http://discovery-service-2:8762/eureka/,http://discovery-service-1:8761/eureka/"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "SPRING_ZIPKIN_SENDER_TYPE=kafka"
      - "SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "SPRING_SLEUTH_SAMPLER_PROBABILITY=1.0"
    networks:
      - ${GLOBAL_NETWORK:-services}

  gateway-service-2:
    image: ${GROUP_ID}/gateway.service:${SERVICE_VERSION:-latest}
    container_name: gateway-service-2
    hostname: gateway-service-2
    ports:
      - "5017:5017"
      - "9093:9093"
    volumes:
      - "./docker-logs:/workspace/gateway-service/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ]
    links:
      - "redis-master:redis" # <service-name>:<host-name>
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5017 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_ROOT=debug"
      - "SERVER_PORT=9093"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888,http://config-server-ha:8889"
      - "SPRING_REDIS_HOST=redis"
      - "LOG_APP-NAME=gateway-service-2"
      - "EUREKA_CLIENT_SERVICE-URL_DEFAULT-ZONE=http://discovery-service-2:8762/eureka/,http://discovery-service-1:8761/eureka/"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "SPRING_ZIPKIN_SENDER_TYPE=kafka"
      - "SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "SPRING_SLEUTH_SAMPLER_PROBABILITY=1.0"
    networks:
      - ${GLOBAL_NETWORK:-services}

volumes:
  postgres_data:
    driver: local