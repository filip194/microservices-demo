version: '3.8'
services:
#  twitter-to-kafka-service:
#    image: ${GROUP_ID}/twitter.to.kafka.service:${SERVICE_VERSION:-latest}
#    ports:
#      - "5005:5005"
#    volumes:
#      - "./docker-logs:/workspace/twitter-to-kafka-service/logs"
#      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
#    user: root
#    entrypoint: [ "check-config-server-started.sh" ] # execute this script as a first thing when container starts
#    depends_on: # docker-compose option that sets ordering between containers
#      - config-server
#      - kafka-broker-1
#      - kafka-broker-2
#      - kafka-broker-3
#    environment:
#      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -Xms128m -Xmx256m"
#      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=info"
#      - "LOGGING_LEVEL_ROOT=info"
#      - "KAFKA-CONFIG_TOPIC-NAME=twitter-topic"
#      - "KAFKA-CONFIG_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
#      - "KAFKA-CONFIG_SCHEMA-REGISTRY-URL=http://schema-registry:8081"
#      # -> overwrite enable mock tweets variable in services.yml file to run application using mock tweets ->
#      # -> this enables running mock tweets without the need to rebuild application and docker image!!!
#      - "TWITTER-TO-KAFKA-SERVICE_ENABLE-MOCK-TWEETS=true"
#      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
#      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
#    networks:
#      - ${GLOBAL_NETWORK:-services}
#  kafka-to-elastic-service:
#    image: ${GROUP_ID}/kafka.to.elastic.service:${SERVICE_VERSION:-latest}
#    ports:
#      - "5006:5006"
#    volumes:
#      - "./docker-logs:/workspace/kafka-to-elastic-service/logs"
#      - "./check-kafka-topics-created.sh:/usr/local/bin/check-kafka-topics-created.sh"
#    user: root
#    entrypoint: [ "check-kafka-topics-created.sh" ]
#    depends_on:
#      - config-server
#      - twitter-to-kafka-service
#      - kafka-broker-1
#      - kafka-broker-2
#      - kafka-broker-3
#      - elastic-1
#      - elastic-2
#      - elastic-3
#    environment:
#      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006 -Xms128m -Xmx256m"
#      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=info"
#      - "LOGGING_LEVEL_ROOT=info"
#      - "KAFKA-CONFIG_TOPIC-NAME=twitter-topic"
#      - "KAFKA-CONFIG_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
#      - "KAFKA-CONFIG_SCHEMA-REGISTRY-URL=http://schema-registry:8081"
#      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
#      - "ELASTIC-CONFIG_INDEX-NAME=twitter-index"
#      - "ELASTIC-CONFIG_CONNECTION-URL=http://elastic-1:9200"
#      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
#      - "SPRING_DATA_ELASTICSEARCH_CLIENT_REACTIVE_ENDPOINTS=elastic-1:9200"
#    networks:
#      - ${GLOBAL_NETWORK:-services}
  postgres:
    image: postgres:${POSTGRES_VERSION:-latest}
    container_name: postgres
    hostname: postgres
    volumes:
      - ./postgres_data:/var/lib/postgresql/data # all changes in database will be stored in this volume
      - ./postgres_init/01-init.sh:/docker-entrypoint-initdb.d/init-db.sh # used only first time container is built to create database and users
    environment:
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=postgres"
      - "KEYCLOAK_DB=keycloak"
      - "KEYCLOAK_DB_USER=keycloak"
      - "KEYCLOAK_DB_PASSWORD=keycloak"
      - "KEYCLOAK_DB_SCHEMA=keycloak"
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "postgres", "-U", "postgres" ]
      timeout: 5s
      interval: 10s
      retries: 10
    restart: "no"
    networks:
      - ${GLOBAL_NETWORK:-services}
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  keycloak-authorization-server:
    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION:-latest}
    container_name: keycloak-authorization-server
    hostname: keycloak-authorization-server
    entrypoint: [ "/opt/keycloak/bin/kc.sh", "start-dev" ]
    ports:
      - "9091:8080"
    environment:
      - "KEYCLOAK_ADMIN=admin"
      - "KEYCLOAK_ADMIN_PASSWORD=admin"
      - "KC_LOG_LEVEL=INFO"
      - "KC_DB=postgres" # database type
      - "KC_DB_USERNAME=keycloak"
      - "KC_DB_PASSWORD=keycloak"
      - "KC_DB_SCHEMA=public" # only public schema works?
      - "KC_DB_URL_DATABASE=keycloak" # database to use
      - "KC_DB_URL_HOST=postgres" # postgres service defined above
    depends_on:
      - postgres
    networks:
      - ${GLOBAL_NETWORK:-services}
  config-server:
    image: ${GROUP_ID}/config.server:${SERVICE_VERSION:-latest}
    container_name: config-server
    hostname: config-server
    ports:
      - "5007:5007"
      - "8888:8888"
    volumes:
      - "./docker-logs:/workspace/config-server/logs" # /workspace/config-server/logs directory structure inside container built by build-image maven plugin
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007 -Xms128m -Xmx256m"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
    networks:
      - ${GLOBAL_NETWORK:-services}
  elastic-query-service-1:
    image: ${GROUP_ID}/elastic.query.service:${SERVICE_VERSION:-latest}
    container_name: elastic-query-service-1
    hostname: elastic-query-service-1
    ports:
      - "5008:5008"
      - "8183:8183"
    volumes:
      - "./docker-logs:/workspace/elastic-query-service/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-elastic-cluster-started.sh:/usr/local/bin/check-elastic-cluster-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ]
    depends_on:
      - config-server
      - elastic-1
      - elastic-2
      - elastic-3
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5008 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=info"
      - "LOGGING_LEVEL_ROOT=info"
      - "ELASTIC-CONFIG_INDEX-NAME=twitter-index"
      - "ELASTIC-CONFIG_CONNECTION-URL=http://elastic-1:9200"
      - "SERVER_PORT=8183"
      - "SERVER_SERVLET_CONTEXT-PATH=/elastic-query-service"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI=http://keycloak-authorization-server:9091/realms/microservices-realm"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI=http://keycloak-authorization-server:9091/realms/microservices-realm/protocol/openid-connect/certs"
      - "SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_TOKEN-URI=http://keycloak-authorization-server:9091/realms/microservices-realm/protocol/openid-connect/token"
      - "SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres?currentSchema=public&binaryTransfer=true&reWriteBatchedInserts=true"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "SPRING_DATA_ELASTICSEARCH_CLIENT_REACTIVE_ENDPOINTS=elastic-1:9200"
    networks:
      - ${GLOBAL_NETWORK:-services}
  elastic-query-service-2:
    image: ${GROUP_ID}/elastic.query.service:${SERVICE_VERSION:-latest}
    container_name: elastic-query-service-2
    hostname: elastic-query-service-2
    ports:
      - "5009:5009"
      - "8186:8186"
    volumes:
      - "./docker-logs:/workspace/elastic-query-service/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-elastic-cluster-started.sh:/usr/local/bin/check-elastic-cluster-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ]
    depends_on:
      - config-server
      - elastic-1
      - elastic-2
      - elastic-3
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5009 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=info"
      - "LOGGING_LEVEL_ROOT=info"
      - "ELASTIC-CONFIG_INDEX-NAME=twitter-index"
      - "ELASTIC-CONFIG_CONNECTION-URL=http://elastic-1:9200"
      - "SERVER_PORT=8186"
      - "SERVER_SERVLET_CONTEXT-PATH=/elastic-query-service"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI=http://keycloak-authorization-server:9091/realms/microservices-realm"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI=http://keycloak-authorization-server:9091/realms/microservices-realm/protocol/openid-connect/certs"
      - "SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_TOKEN-URI=http://keycloak-authorization-server:9091/realms/microservices-realm/protocol/openid-connect/token"
      - "SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres?currentSchema=public&binaryTransfer=true&reWriteBatchedInserts=true"
      - "SPRING_DATASOURCE_INITIALIZATION-MODE=never" # schema is already created and data is already inserted so we might get initialization errors
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "SPRING_DATA_ELASTICSEARCH_CLIENT_REACTIVE_ENDPOINTS=elastic-1:9200"
    networks:
      - ${GLOBAL_NETWORK:-services}
  elastic-query-web-client-1:
    image: ${GROUP_ID}/elastic.query.web.client:${SERVICE_VERSION:-latest}
    container_name: elastic-query-web-client-1
    hostname: elastic-query-web-client-1
    ports:
      - "5010:5010"
      - "8184:8184"
    volumes:
      - "./docker-logs:/workspace/elastic-query-web-client/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ]
    depends_on:
      - config-server
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5010 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=debug"
      - "LOGGING_LEVEL_ROOT=debug"
      - "SERVER_PORT=8184"
      - "SERVER_SERVLET_CONTEXT-PATH=/elastic-query-web-client"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_BASE-URL=http://elastic-query-service/elastic-query-service/documents"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_ID=elastic-query-service-1"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_HOST=elastic-query-service-1"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_PORT=8183"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_ID=elastic-query-service-2"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_HOST=elastic-query-service-2"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_PORT=8186"
      - "SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI=http://keycloak-authorization-server:9091/realms/microservices-realm"
      - "SECURITY_LOGOUT-SUCCESS-URL=http://elastic-query-web-client:8184/elastic-query-web-client"
      - "SECURITY_DEFAULT-CLIENT-REGISTRATION-ID=keycloak"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
    networks:
      - ${GLOBAL_NETWORK:-services}
  elastic-query-web-client-2:
    image: ${GROUP_ID}/elastic.query.web.client.2:${SERVICE_VERSION:-latest}
    container_name: elastic-query-web-client-2
    hostname: elastic-query-web-client-2
    ports:
      - "5011:5011"
      - "8185:8185"
    volumes:
      - "./docker-logs:/workspace/elastic-query-web-client/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ]
    depends_on:
      - config-server
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5011 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=debug"
      - "LOGGING_LEVEL_ROOT=debug"
      - "SERVER_PORT=8185"
      - "SERVER_SERVLET_CONTEXT-PATH=/elastic-query-web-client"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_BASE-URL=http://elastic-query-service/elastic-query-service/documents"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_ID=elastic-query-service-1"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_HOST=elastic-query-service-1"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_PORT=8183"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_ID=elastic-query-service-2"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_HOST=elastic-query-service-2"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_PORT=8186"
      - "SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI=http://keycloak-authorization-server:9091/realms/microservices-realm"
      - "SECURITY_LOGOUT-SUCCESS-URL=http://elastic-query-web-client-2:8185/elastic-query-web-client"
      - "SECURITY_DEFAULT-CLIENT-REGISTRATION-ID=keycloak"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
    networks:
      - ${GLOBAL_NETWORK:-services}

volumes:
  postgres_data:
    driver: local