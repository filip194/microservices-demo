version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${KAFKA_VERSION:-latest}
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    networks:
      - ${GLOBAL_NETWORK:-kafka}
  schema-registry:
    image: confluentinc/cp-schema-registry:${KAFKA_VERSION}
    hostname: schema-registry
    depends_on:
      - zookeeper
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-broker-2:9092,LISTENER_LOCAL://localhost:29092 # for Kafka 7.0.x
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_DEBUG: 'true'
    networks:
      - ${GLOBAL_NETWORK:-kafka}
  kafka-broker-1:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    hostname: kafka-broker-1
    ports:
      - "19092:19092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:9092,LISTENER_LOCAL://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_COMPRESSION_TYPE: producer
    networks:
      - ${GLOBAL_NETWORK:-kafka}
  kafka-broker-2:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    hostname: kafka-broker-2
    ports:
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-2:9092,LISTENER_LOCAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_COMPRESSION_TYPE: producer
    networks:
      - ${GLOBAL_NETWORK:-kafka}
  kafka-broker-3:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    hostname: kafka-broker-3
    ports:
      - "39092:39092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-3:9092,LISTENER_LOCAL://localhost:39092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_COMPRESSION_TYPE: producer
    networks:
      - ${GLOBAL_NETWORK:-kafka}

# Zookeeper is required to hold metadata for a cluster, used for organization of kafka cluster, health and leader election.
# It is planned to be removed soon and leader election will be done inside Kafka cluster itself, where the leader itself is responsible for the cluster.

# Schema registry is used to register a schema for kafka topic, it will check producers and consumers each time, to force them to use registered schema so only the allowed schema will be used.
# Producers and Consumers check schema with ID and cache the results for sending and receiving data, so it's one time request to da a schema registry and then subsequent checks done by using cache.
# Schema registry also allows backward and forward compatibility. So, schema can evolve without breaking changes.

# Kafka Brokers/containers: each uses the same kafka image, while the ports are different.
# We have 3 brokers/containers to accomplish concept of Quorum -> set the minimum number of brokers to create a network and to prevent a split brain (https://en.wikipedia.org/wiki/Split-brain_(computing)).
# It simply prevents creation of more than one network in a group of kafka brokers, such that with 3 brokers, a network must have 2 nodes at least.
# This way we can be sure only 1 network can be created, because there can only be one group with 2 nodes. Note that other group will only have 1 node, which is not enough to create a network.

# KAFKA BROKER URIs - 2 listeners: one for internal communication and one for accessing cluster from outside of container, which will use exposed ports.
# For example,  exposed port is 19092 for Kafka broker 1,  that means we can reach this container from the outside using localhost or name of the machine Docker runs, and on port 19092.
# Inside Docker we will reach this Kafka broker/container 1 using the hostname which is kafka-broker-1 and for port we use 9092 for internal communication.

# KAFKA COMPRESSION TYPE: producer -> concept of compressing data end-to-end