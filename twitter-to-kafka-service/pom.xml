<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>microservices-demo</artifactId>
        <groupId>com.microservices.demo</groupId>
        <version>1.0.0-MICROSERVICES-DEMO</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>twitter-to-kafka-service</artifactId>

    <dependencies>
        <!--MODULES-->
        <dependency>
            <groupId>com.microservices.demo</groupId>
            <artifactId>app-config-data</artifactId>
        </dependency>
        <dependency>
            <groupId>com.microservices.demo</groupId>
            <artifactId>kafka-admin</artifactId>
        </dependency>
        <dependency>
            <groupId>com.microservices.demo</groupId>
            <artifactId>kafka-model</artifactId>
        </dependency>
        <dependency>
            <groupId>com.microservices.demo</groupId>
            <artifactId>kafka-producer</artifactId>
        </dependency>
        <!--SPRING-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>
        <!--lombok is compile only tool, so we use provided scope-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
        </dependency>
        <!--for streaming data from twitter-->
        <dependency>
            <groupId>org.twitter4j</groupId>
            <artifactId>twitter4j-stream</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <image>
                        <name>${project.groupId}/twitter.to.kafka.service:${project.version}</name>
                    </image>
                </configuration>
                <executions>
                    <execution>
                        <phase>install</phase>
                        <!-- spring boot build-image follows layered approach to prevent two overheads:-->
                        <!--    1) prevents creating single fat jar-->
                        <!--    2) uses caching during image update, so it doesn't have to update the whole jar-->
                        <!-- This is achieved by Cloud Native Buildpacks (buildpacks.io)-->
                        <goals>
                            <goal>build-image</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>